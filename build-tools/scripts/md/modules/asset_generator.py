# build-tools/scripts/md/modules/asset_generator.py
"""
Generates intermediate build assets like JSON and CSS files.

This module consolidates the logic for creating configuration and styling
artifacts that are used later in the build pipeline. All functions are
designed to be pure transformations where possible.
"""
import re
import json
from pathlib import Path
from typing import Dict, Optional

def generate_macros_json(sty_content: str) -> str:
    """
    Parses LaTeX .sty content to find Agda term macros and returns a JSON string.

    Args:
        sty_content: The string content of the macros.sty file.

    Returns:
        A JSON formatted string containing the macro definitions.
    """
    # Pattern to capture MacroName (1), AgdaCommand (2), and the argument (3).
    pattern = re.compile(
        r'^\\newcommand\{\\([a-zA-Z@]+)\}\s*\{\s*\\(Agda[a-zA-Z]+)\{(.*?)\}\s*\}',
        re.MULTILINE
    )
    agda_terms_dict = {}
    for match in pattern.finditer(sty_content):
        macro_name = match.group(1)
        agda_class = match.group(2)
        agda_terms_dict[macro_name] = {
            "basename": macro_name,
            "agda_class": agda_class
        }

    output_json = {
        "//": "Auto-generated by generate_macros_json from build pipeline",
        "agda_terms": dict(sorted(agda_terms_dict.items())),
        "placeholders": {}
    }
    return json.dumps(output_json, indent=2)

def generate_custom_css_from_agda(
    agda_css_content: str,
    existing_custom_css: Optional[str] = None
) -> str:
    """
    Generates custom.css content by extracting colors from Agda.css.

    Args:
        agda_css_content: The string content of the source Agda.css file.
        existing_custom_css: Optional string content of an existing custom.css
                             to be merged with the generated styles.

    Returns:
        The complete string content for the new custom.css file.
    """
    # Pattern to match .Agda .ClassName { properties }
    pattern = r'\.Agda\s+\.(\w+)\s*\{\s*([^}]*)\s*\}'
    color_mappings = {}
    for match in re.finditer(pattern, agda_css_content):
        class_name = match.group(1)
        properties = match.group(2).strip()
        properties = re.sub(r'\s+', ' ', properties).strip()
        color_mappings[class_name] = properties

    css_parts = [
        "/*",
        " * Custom CSS for Formal Ledger Specifications",
        " *",
        " * This file contains auto-generated Agda class styles (from Agda.css)",
        " * and project-specific customizations.",
        " */",
        "",
        "/* ======================================================================= */",
        "/* AUTO-GENERATED AGDA CLASSES (from Agda.css)                        */",
        "/* ======================================================================= */",
        ""
    ]

    for class_name, properties in sorted(color_mappings.items()):
        rule = f"code.Agda{class_name} {{\n    {properties}\n}}"
        css_parts.append(rule)

    css_parts.extend([
        "",
        "/* ======================================================================= */",
        "/* PROJECT-SPECIFIC STYLES                                            */",
        "/* ======================================================================= */",
        ""
    ])

    if existing_custom_css and existing_custom_css.strip():
        css_parts.append(existing_custom_css.strip())
    else:
        # Default project styles if no existing CSS is provided
        default_styles = """
/* Highlighting for \\hldiff{} content */
.highlight {
    background-color: yellow;
    padding: 2px 4px;
    border-radius: 3px;
}

/* Caption styling */
.caption-text {
    font-style: italic;
    color: #666;
    margin-top: 0.5em;
}

/* Conway admonition styling */
.conway-specifics {
    border-left: 4px solid #2196F3;
    padding: 1em;
    margin: 1em 0;
    background-color: #f8f9fa;
}
        """
        css_parts.append(default_styles.strip())

    return "\n".join(css_parts) + "\n"
