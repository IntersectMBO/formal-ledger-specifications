# Usage: This script is part of a four stage pipeline and is meant to be used in conjunction with
#        `md_preprocess.py`, `md_agda-filter.lua`, `md_postprocess.py`, and pandoc.  For example,
#          $ python md_generate_macros_json.py macros.sty preprocess_macros.json
#          $ python md_preprocess.py Transaction.lagda preprocess_macros.json code_blocks.json > Transaction.lagda.temp
#          $ pandoc Transaction.lagda.temp -f latex -t gfm+attributes --lua-filter agda-filter.lua -o Transaction.lagda.intermediate
#          $ python postprocess.py Transaction.lagda.intermediate code_blocks.json Transaction.lagda
import re
import json
import sys

def generate_macros_json(sty_content):
    """
    Parses LaTeX .sty content to find simple Agda term macros
    and generates a JSON dictionary including the Agda semantic class.
    """
    # Refined regex to capture MacroName (1) and AgdaCommand (2)
    # Also captures argument of AgdaCommand in (3), though we use MacroName as basename
    pattern = re.compile(r'^\\newcommand\{\\([a-zA-Z@]+)\}\s*\{\s*\\(Agda[a-zA-Z]+)\{(.*?)\}\s*\}', re.MULTILINE)

    agda_terms_dict = {}
    for match in pattern.finditer(sty_content):
        macro_name = match.group(1)
        agda_class = match.group(2)
        # basename = match.group(3) # Optional: use content if needed, but macro_name is likely better text

        agda_terms_dict[macro_name] = {
            "basename": macro_name,  # Use the macro name itself as the text content
            "agda_class": agda_class # Store the captured Agda semantic class
        }

    # Structure for the JSON file
    output_json = {
        "//": "Auto-generated by generate_macro_json.py from macros.sty",
        "agda_terms": agda_terms_dict,
        "placeholders": {
            # Manually add placeholders if needed, e.g.:
            # "hldiff": "\\\\HighlightPlaceholder{#1}"
        }
    }

    # Ensure keys are sorted for consistent output (optional, but nice)
    output_json["agda_terms"] = dict(sorted(agda_terms_dict.items()))

    return json.dumps(output_json, indent=2)

# --- Main execution part remains the same ---
if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"Usage: python {sys.argv[0]} <input_macros_sty_file> <output_macros_json_file>")
        sys.exit(1)

    input_sty_file = sys.argv[1]
    output_json_file = sys.argv[2]

    try:
        with open(input_sty_file, 'r', encoding='utf-8') as f:
            sty_input_content = f.read()

        json_output = generate_macros_json(sty_input_content)

        with open(output_json_file, 'w', encoding='utf-8') as f:
            f.write(json_output)

        print(f"Successfully generated {output_json_file} from {input_sty_file}")

    except FileNotFoundError:
        print(f"Error: Input file not found: {input_sty_file}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"An error occurred: {e}", file=sys.stderr)
        sys.exit(1)
